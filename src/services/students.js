import { StudentsCollection } from "../models/students.js";

export const getAllStudents = async () => {
  const students = await StudentsCollection.find();
  return students;
};

export const getStudentById = async (studentId) => {
  const student = await StudentsCollection.findById(studentId);
  return student;
};

//Додаємо у сервіс студентів функцію, яка буде записувати отримані дані (payload) у базу даних.

export const createStudent = async (payload) => {
  const student = await StudentsCollection.create(payload);
  return student;
};

export const deleteStudent = async (studentId) => {
  const student = await StudentsCollection.findOneAndDelete({
    _id: studentId,
  });
  return student;
};

//Додаємо у сервіс студентів функцію, яка буде оновлювати дані про студента (payload)
//по ідентифікатору(studentId) в базі даних.

export const updateStudent = async (studentId, payload, options = {}) => {
  const rawResult = await StudentsCollection.findOneAndUpdate(
    { _id: studentId },
    payload,
    {
      new: true,
      includeResultMetadata: true,
      ...options,
    }
  );

  if (!rawResult || !rawResult.value) return null;

  return {
    student: rawResult.value,
    isNew: Boolean(rawResult?.lastErrorObject?.upserted),
  };
};

//Оскільки ми вже маємо функцію сервісу updateStudent,
// яку ми до цього створили для PUT ендпоінта, то можемо не створювати нову для PATCH,
//а перевикористати її.Єдина відмінність буде полягати в тому, що ми не
//будемо під час виклику нічого передавати третім аргументом options,
//оскільки ми завчасно продумали цей варіант і задали options дефолтне значення
//як порожній обєкт

//------------------

//Метод find() моделі StudentsCollection — це вбудований метод Mongoose
//для пошуку документів у MongoDB.Викликаючи find() на моделі StudentsCollection,
//ми отримаємо масив документів, що відповідають моделі Student.У випадку,
//якщо колекція студентів порожня, метод повертає порожній масив

//------------------

//Метод findById() моделі StudentsCollection — це вбудований метод Mongoose для
//пошуку одного документа у MongoDB за його унікальним ідентифікатором.
//Викликаючи findById() на моделі StudentsCollection із вказаним ідентифікатором
//студента, ми отримаємо документ, що відповідає цьому ідентифікатору, як об'єкт Student.
//Якщо документ із заданим ідентифікатором не буде знайдено, метод поверне null

//------------------

//Для створення нового документа в колекції, на основі вказаної моделі,
//в Mongoose використовується метод:
//Model.create(doc)
//де:
//--doc — перший аргумент (обовязковий), який містить дані
//(обєкт або масив обєктів), які будуть використані для створення
//нового документа або документів у колекції.База даних створює новий
//документ, додає до нього унікальний ідентифікатор та повертає створений обєкт.

//------------------

//Для видалення документа з колекції в Mongoose використовується метод:
//findOneAndDelete(filter, options, callback)
//де:
//--filter — перший аргумент, який вказує на умову, за якою відбувається пошук документа
//для видалення.Передається як обєкт з властивостями.Обов'язковий аргумент
//--options — обєкт який може містити додаткові властивості для налаштування видалення.
//Наприклад, можна використовувати опцію sort, щоб вказати порядок сортування документів
//перед видаленням.Необов'язковий аргумент
//--callback — якщо не використовується async/await, можна передати функцію зворотного
//виклику для обробки результату операції.Необов'язковий аргумент.

//------------------

//Для оновлення документа в колекції, на основі вказаної моделі,
//в Mongoose використовується метод:
//Model.findOneAndUpdate(query, update, options, callback)
//де:
//--query — перший аргумент(обовязковий) це обєкт, який містить умови пошуку документа
//у колекції за його властивостями
//--update — другий аргумент (обовязковий) це обєкт, який містить дані для оновлення.
//Може бути звичайним обєктом з новими значеннями полів або використовувати спеціальні
//оператори оновлення MongoDB, такі як $set, $inc тощо
//--options — третій аргумент (обов'язковий) це обєкт додаткових налаштувань
//(може бути порожнім { }), таких як:
//-new: повертає оновлений документ, якщо true
//-upsert: створює новий документ, якщо відповідний не знайдено
//--callback - четвертий аргумент (необовязковий) це функція зворотного виклику
//для обробки результату
